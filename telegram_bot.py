import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7784851665:AAH-AkFYh1tgcYxG9ti4DZJvogAseC5hVAM"

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = [
    {"name": "–ë—É—Å—Ç –º–∞–∫—Å —Ä–∞–Ω–≥–∞", "price": "200 —Ä—É–±", "image": None},
    {"name": "–ë—É—Å—Ç –º–∏—Ñ–∏–∫ –ª–∏–≥–∏", "price": "200 —Ä—É–±", "image": None},
    {"name": "–ë—É—Å—Ç –∫—É–±–∫–∏ –æ—Ç 100 –∫—É–±–∫–æ–≤", "price": "–æ—Ç 50 —Ä—É–±–ª–µ–π (—Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è)", "image": None},
    {"name": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É", "price": "—Ü–µ–Ω—É –æ–±–≥–æ–≤–æ—Ä–∏–º", "image": None}
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='catalog')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞! üòé\n"
        "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n"
        "–í—Å–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–≥–æ –ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—è.\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –ø—Ä–∏–≥–ª—è–Ω–µ—Ç—Å—è!"
    )

    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == 'catalog':
        await query.message.reply_text("üìã –ú–æ–∏ —É—Å–ª—É–≥–∏:")

        for i, product in enumerate(PRODUCTS, 1):
            message = f"{i}. {product['name']} - {product['price']}"
            # –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
            # if product['image']:
            #     await query.message.reply_photo(photo=product['image'], caption=message)
            # else:
            await query.message.reply_text(message)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(product['name'], callback_data=f"product_{i}")]
            for i, product in enumerate(PRODUCTS)
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)

    elif query.data.startswith('product_'):
        product_index = int(query.data.split('_')[1]) - 1
        requisites_message = (
            "–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            "@Tyezik (–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É, –ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å, –º–æ–≥—É –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å)\n"
            "–°—Å—ã–ª–∫–∞ –Ω–∞ https://www.donationalerts.com/r/makarovbyshop\n"
            "(–ø—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—è—Å–Ω–∏—Ç–µ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç–µ, "
            "—Ç–∞–∫–∂–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π)\n"
            "–¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
        )
        await query.message.reply_text(requisites_message)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()